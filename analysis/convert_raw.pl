#!/usr/bin/perl

use strict;
use warnings;
use feature qw/say/;

my %constants = (
	'DR005967_F00006.decoded' => {
	# Run number	10007
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330402282997966,
		tB  => 1.06191396713257,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00007.decoded' => {
	# Run number	10032
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00008.decoded' => {
	# Run number	10033
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00009.decoded' => {
	# Run number	10034
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00010.decoded' => {
	# Run number	10035
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00001.decoded' => {
	# Run number	10036
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00002.decoded' => {
	# Run number	10037
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00003.decoded' => {
	# Run number	10038
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00004.decoded' => {
	# Run number	10039
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005967_F00005.decoded' => {
	# Run number	10041
		invert_horizontal => 1,
		vt1 => 55,
		vt2 => 110,
		tA  => 0.000330842973198742,
		tB  => 1.06235790252686,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -38.9401473999023,
		v1B => 0.944003820419312,
		v1C => -0.00848989374935627,
		v2A => -14.8579692840576,
		v2B => 0.0481690242886543,
		v2C => -0.000162942189490423,
		v3A => -13.0036487579346,
		v3B => 0.0136960987001657,
	},
	'DR005289_F00004.decoded' => {
	# Run number	10008
		invert_vertical => 1,
		vt1 => 60,
		vt2 => 112,
		tA  => 0.000329889997374266,
		tB  => 1.07194399833679,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -50.7097244262695,
		v1B => 1.24799799919128,
		v1C => -0.0102433189749718,
		v2A => -15.4362697601318,
		v2B => 0.0579058229923248,
		v2C => -0.000205721182283014,
		v3A => -13.0402088165283,
		v3B => 0.0137846190482378,
	},
	'DR005289_F00005.decoded' => {
	# Run number	10015
		invert_vertical => 1,
		vt1 => 60,
		vt2 => 112,
		tA  => 0.000330119975842535,
		tB  => 1.07104396820068,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -50.7097244262695,
		v1B => 1.24799799919128,
		v1C => -0.0102433189749718,
		v2A => -15.4362697601318,
		v2B => 0.0579058229923248,
		v2C => -0.000205721182283014,
		v3A => -13.0402088165283,
		v3B => 0.0137846190482378,
	},
	'DR005289_F00006.decoded' => {
	# Run number	10018
		invert_vertical => 1,
		vt1 => 60,
		vt2 => 112,
		tA  => 0.000330440350808203,
		tB  => 1.0711817741394,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -50.7097244262695,
		v1B => 1.24799799919128,
		v1C => -0.0102433189749718,
		v2A => -15.4362697601318,
		v2B => 0.0579058229923248,
		v2C => -0.000205721182283014,
		v3A => -13.0402088165283,
		v3B => 0.0137846190482378,
	},
	'DR005289_F00001.decoded' => {
	# Run number	10023
		invert_vertical => 1,
		vt1 => 60,
		vt2 => 112,
		tA  => 0.000330440350808203,
		tB  => 1.0711817741394,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -50.7097244262695,
		v1B => 1.24799799919128,
		v1C => -0.0102433189749718,
		v2A => -15.4362697601318,
		v2B => 0.0579058229923248,
		v2C => -0.000205721182283014,
		v3A => -13.0402088165283,
		v3B => 0.0137846190482378,
	},
	'DR005289_F00002.decoded' => {
	# Run number	10024
		invert_vertical => 1,
		vt1 => 60,
		vt2 => 112,
		tA  => 0.000330440350808203,
		tB  => 1.0711817741394,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -50.7097244262695,
		v1B => 1.24799799919128,
		v1C => -0.0102433189749718,
		v2A => -15.4362697601318,
		v2B => 0.0579058229923248,
		v2C => -0.000205721182283014,
		v3A => -13.0402088165283,
		v3B => 0.0137846190482378,
	},
	'DR005289_F00003.decoded' => {
	# Run number	10025
		invert_vertical => 1,
		vt1 => 60,
		vt2 => 112,
		tA  => 0.000330440350808203,
		tB  => 1.0711817741394,
		mA  => -0.763399958610535,
		mB  => 0.00876100547611713,
		v1A => -50.7097244262695,
		v1B => 1.24799799919128,
		v1C => -0.0102433189749718,
		v2A => -15.4362697601318,
		v2B => 0.0579058229923248,
		v2C => -0.000205721182283014,
		v3A => -13.0402088165283,
		v3B => 0.0137846190482378,
	}
);

# TODO invert x or y
sub h {
	my ($x, $f) = @_;
	my $c = $constants{$f};
	#$x = 3841 - $x if $c->{invert_horizontal};
	return 10 ** ($c->{tA} * $x + $c->{tB});
}

sub v {
	my ($x, $f) = @_;
	my $c = $constants{$f};
	$x = 511 - $x if $c->{invert_vertical};
	my $v =
		$x > $c->{vt2} ? $c->{v3B} * $x + $c->{v3A} :
		$x > $c->{vt1} ? $c->{v2C} * $x**2 + $c->{v2B} * $x + $c->{v2A} :
						$c->{v1C} * $x**2 + $c->{v1B} * $x + $c->{v1A};
	return 10 ** $v;
}

# TODO option
my $print_all_points = 0;
my $sep = "\t";

my @scans;

my $fn = $ARGV[0];

die "No constants defined for $fn" unless defined $constants{$fn};

open my $F, '<', $fn or die "Can't open $fn";

for (<$F>) {
	next if /^#/;
	my ($s, $x, $y) = split;
	next unless defined $x and defined $y;
	push @{$scans[$s]}, [h($x, $fn), v($y, $fn)];
}

close $F;

if ($print_all_points) {
	for my $s (0..$#scans) {
		next unless defined $scans[$s];
		for (@{$scans[$s]}) {
			say join $sep, $s, @$_;
		}
		say "";
	}
} else {
	for my $s (0..$#scans) {
		next unless defined $scans[$s];
		my @reduced;
		for (@{$scans[$s]}) {
			my $int_m = int($_->[0]+0.5);
			push @{$reduced[$int_m]}, $_;
		}
		for my $m (12..220) {
			my $sorted = [ sort {$b->[1] <=> $a->[1]} @{$reduced[$m]} ];
			my $maxm = $sorted->[0]->[0];
			my $maxv = $sorted->[0]->[1];
			say join $sep, $s, $m, $maxv, $maxm;
		}
		
		say "";
	}
}



