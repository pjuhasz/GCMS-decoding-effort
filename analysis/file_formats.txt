Introduction
============

This document describes the file formats of the surviving binary data files
that encode measurement data from the Viking GCMS (gas chromatograph mass
spectrometer) instrument.

Both Viking spacecraft carried such an instrument, and several sample runs
were performed by both spacecraft. The data is available in three versions:

 * binary data files with raw measurement data
 * binary data files with processed, reduced data
 * scanned bar graphs of the processed data (originally on microfilm)

There is one data file of each kind for each sample run. It turns out that
the format of the raw data files are completely different for the Viking-1
and Viking-2 sample runs - apparently, the Viking-2 data has undergone some
processing after all, while the Viking-1 data is closer to what was actually
received from the spacecraft. However, the format of the reduced dataset is
the same for both spacecraft.

Format of the reduced dataset
=============================

Overview
--------

It seems that these files encode the transformed, calibrated results of
the mass spectrometry measurements, that is, they store current
(or equivalent) versus m/z, plus all the necessary auxiliary engineering
data. It is reasonable to assume that the bar charts on the microfilms
were generated from these files, and indeed it is possible to create
almost identical plots from them.

The format of these files seem to be the same for both instruments.
They consist of fixed size 1282 byte records. The first record serves as
a global header for storing constants and other metadata relevant to the
entire sample run. Each subsequent record contains the reduced mass
spectrum from one scan. Therefore a data file with `n` scans has a file
size of `(n+1)*1282`; this is true for all 6 Viking-1 and 10 Viking-2
files.

All actual measurement data and some of the constants in the header are
floating point numbers, however, they use an obscure and obsolete
floating point number format (after all, the now ubiquitous IEEE-754 was
not invented yet in 1977). This format appears to be that of the
IBM 1130/1800, but since available documentation is sparse, a detailed
description is warranted here.

Floating point format
---------------------

This format uses 32 bits (or 4 bytes, stored on disk as big endian) to
represent a floating point number. The first 24 bits represent the
mantissa _in two's complement_ notation. The remaining 8 bits store the
exponent (but see below).

The following figure illustrates the format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-------------------------------------------+---------------+
     |s:f:      Mantissa (two's complement)          |Exponent - Bias|
     +-+-+-------------------------------------------+---------------+

A few things are worth noting here.

 * The mantissa is in a two's complement form; this means that while the
   most significant bit (the `s` bit in the figure) can still be thought
   of as the sign bit (it's 0 if the number is positive and 1 if it is
   negative), it is really a part of the representation.

 * As opposed to IEEE-754 where the first bit of the mantissa is omitted
   (because it is almost always 1), here the entire mantissa is always
   encoded. The second most significant bit (the `f` bit in the figure)
   is always 1 for positive numbers. In other words, this format does
   not use hidden bit normalization.

 * Because the presence of the first bit, the actual usable precision of
   this format is one bit less than that of IEEE-754. 

 * The exponent is biased. Whether the bias is 128 or 129 depends on the
   point of view. From the examples in the table below it can be seen
   that values close to unity are encoded with an exponent of 0x81, or
   129. Given that the real value of a floating point number can be
   expressed as `v = m * 2 ** (e - bias)`, it makes more sense to say
   that the bias is 129 in this case.

 * The presence of the first bit (which conceptionally stands before the
   implied "decimal" point) has to be taken into account when writing
   conversion functions to/from this format. The point has to be shifted
   right by 22 bit positions, so the actual conversion formula to use is
   `v = m * 2 ** (e - 129 - 22)`.

 * The number 0 is encoded as 0x00000000.

 * The Rushneck et al. (1978) article about the GSMC instrument mentions
   the IBM 1800 in one of the figures, so it makes sense that the data
   files use the storage format of that computer. However, available
   descriptions (e.g. [http://www.quadibloc.com/comp/cp0201.htm] and
   [https://nssdc.gsfc.nasa.gov/nssdc/formats/IBM1130.htm]) do not
   mention that the mantissa is in two's complement form.

 * The encoded representations are not necessarily aligned to offsets
   divisible by 4. Apparently the IBM 1800 (a 16-bit machine) did not
   have the alignment requirements that modern architectures have.

Examples (taken from DR005631_F00002.PHYS):

Hex      | Binary                            | Decoded value
-------- | --------------------------------- | ----------------------
448bfc81 | 010001001000101111111100 10000001 |   1.07104396820068
84828584 | 100001001000001010000101 10000100 | -15.4362697601318
7697547c | 011101101001011101010100 01111100 |   0.0579058229923248
94249274 | 100101000010010010010010 01110100 | - 0.000205721182283014
97ada784 | 100101111010110110100111 10000100 | -13.0402088165283
70ec717a | 011100001110110001110001 01111010 |   0.0137846190482378
c0000081 | 110000000000000000000000 10000001 | - 1.0

Integer format
--------------

Most, if not all, numbers in the reduced data files that are not
floating point are 16 bit (unsigned?) integers in big endian format. In
many cases (raw measurement data or engineering parameters from the
instrument) the actual value use only 9 bits.

Header
------

The first row, 1282 bytes long, encodes a number of engineering
parameters relevant to the sample run, numerical constants used for
calibration/data processing, and a table of some parameter
for all scans in the sample run.

The following list attempts to enumerate all known fields. Offsets are
in hexadecimal notation. Type `i16` means big endian 16 bit integer,
`f` means the floating point format described above.

Offset    | Type | Meaning, notes
--------- | ---- | --------------
0000      | i16  | ?       - always 0x0005 - row start magic number?
0002-0078 | i16  | blank
0080      | i16  | ?       - always 0x0040
0082      | i16  | ?       - always 0x0040
0084-046a | i16  | table of effluent divider status, or related (?)
046c      | i16  | blank
046e      | i16  | initial mission scan number - 282 or 283
0470      | i16  | number of scans
0472      | i16  | blank
0474      | f    | Volts-to-amps (3) B
0478      | f    | Volts-to-amps (3) A
047c      | f    | Volts-to-amps (2) C
0480      | f    | Volts-to-amps (2) B
0484      | f    | Volts-to-amps (2) A
0488      | f    | Volts-to-amps (1) C
048c      | f    | Volts-to-amps (1) B
0490      | f    | Volts-to-amps (1) A
0494      | f    | Mass-compensation B
0498      | f    | Mass-compensation A
049c      | f    | Time-to-mass B
04a0      | f    | Time-to-mass A
04a4      | i16  | Last RIC used in Volts-to-amps curve 2
04a6      | i16  | Last RIC used in Volts-to-amps curve 1
04a8      | i16  | Serial Number
04aa      | i16  | Processed on day
04ac      | i16  | Processed on month
04ae      | i16  | Processed on year (last two digits)
04b0      | i16  | Run number
04b2-0501 | ???  | 80 bytes with unknown meaning

A note about the effluent divider status:

Apparently this parameter is crucial in interpreting the results.
All gas chromatogram charts in Rushneck et al. (1978) include a plot of
this parameter, and its value is necessary to calculate absolute
intensities. Yet, it is not possible to identify this parameter in the
reduced data sets with absolute certainty.

A table of some parameter, likely the effluent divider status, or
something related, is included in the header as a table of integers
starting from offset 0x0084. The table stores one value per scan, in
_reverse order_, so that scan 1 is at offset 0x046a and subsequent scans
are at decreasing offsets. In sample runs with less than 500 scans the
beginning of this table is empty. Furthermore, the values in this table
are replicated in each scan row's header (see below).

However, the representation of this value is not uniform across all data
files. In Viking-2 files 1-3, 8 they are in the range 1..5 and plotting
the table reproduces the corresponding plot in Fig. 7 of Rushneck et al.
(1978) exactly. However, in the rest of the files use a different
representation (values between 0-0x26) and the plots resemble but do not
match their counterparts in the article. All Viking-1 files use this
second format. It is possible that this second format encodes the ion
pump current from which the effluent divider status was derived, but the
exact correspondence between the two is not known.

Missing/unidentified information: oven temperature, mass compensation

Scan records
------------

After the global header the data file consists of 1282 byte records,
each record encoding a single scan. The first 282 bytes are occupied by
a row header. The remaining 1000 bytes encode the actual measurement
data (intensities, or current) in linear units, one 4 byte floating
point number per m/z slot, in _reverse order_.

That means that to retrieve the value for m/z slot `n` for scan `i`, one
has to read 4 bytes from the offset `(i+1) * 1282 - n * 4`. Some slots
at the beginning and end of the data section of the record are filled
with zeroes, because the instrument measured between m/z of approx.
12 and 219, but the end of the record actually correspond to m/z 1.

In some cases (DR005631_F00001.PHYS) the first scan is missing, so the
above formula has to be adjusted accordingly.

Row header
----------

Offsets here are counted from _beginning of the record_.

Offset    | Type | Meaning, notes
--------- | ---- | --------------
0000      | i16  | ?       - always 0x0005 - row start magic number?
0002      | i16  | MIT Scan number
0004      | i16  | GCMS Run ID number
0006      | i16  | ?       - always 0x0001?
0008      | i16  | Mission scan number
000a      | i16  | effluent divider status? (same as in the header table)
000c      | i16  | blank
000e      | i16  | blank
0010      | i16  | ?       - some large number e.g. 0x7fff
0012      | i16  | initial mission scan number, constant (often 0x11b)
0014      | i16  | ?       - always 0x0001?
0016-00d6 | i16  | blank
00d8      | i16  | ?       - always 0x0004
00da-00e6 | i16  | blank
00e8      | i16  | ?
00ea      | i16  | ?
00ee      | i16  | ?
00f0      | i16  | ?
00f2      | i16  | ?
00f4      | i16  | ?
00f6      | i16  | ?
00f8      | i16  | ?
00fa      | i16  | ?
00fe      | i16  | ?
0100      | i16  | ?
0102      | i16  | ?
0104      | i16  | ?
0104      | i16  | ?
0106      | i16  | ?
0106      | i16  | ?
0108      | i16  | ?
010a      | i16  | ?
010e      | i16  | ?
0110      | i16  | ?
0112      | i16  | ?
0114      | i16  | MIT Scan number
0116      | i16  | Mission scan number
0118      | i16  | Counter?

TODO info about the rest

Reproducing the mass spectrograms from the microfilms
-----------------------------------------------------

TODO

Format of the Viking-1 raw dataset
==================================

TODO

Format of the Viking-2 raw dataset
==================================

TODO
